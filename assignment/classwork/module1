
# n="bhavan"
# print(n)


#BAMALIC   #(bitwise,arithmetic,membership,assignment,logical,identity,comparission)

#arthmetic operators
#  a,b=10,3
# print(a+b) #13
# print(a-b) #7
# print(a*b) #30
# print(a/b) #3.333
# print(a//b) #3(floor division only integer value will come)
# print(a%b) #1(gives remainder)
# print(a**b) #1000(a power b)
#print(-a) #unary
#print(+a) #unary
# a=a+b*a-(a**b)
# print(a)

#operator precidence
#brackets
#power
#div
#mul
#add
#sub
#for same operator it does from left to ryt

#Membership operator

# num=[2,3,4]
# name="bhavan"
#a=3 in num
#a=(3+4) not in num
#print(a)
#a="h" in name
#print(a)
#a="h" not in name

#Assignment Operators
# a=5
# #a=a+2
# a+=2 #same as above expression 
# a-=1 #a is subtracted by 1
# a*=2 #mul by 2
# a/=2 #a div by 2
# a//=2 #
# a%=2 #2 is divided with 5 and gives rem 1

#Logical Operator(and,or,not)
# print(True and True) #true
# print(True or False) #true
# print(False and True) #false
# print(False and False) #false
# print(True or True) #true
# print(False or False) #false


#IDENTITY Operators(is and is not)
# x=10 
# y=10
# print(x is y) #compares the memory location

#comparission operators
# a=10
# b=20
# print(a>b)
# print(a<b)
# print(a==b)
# print(a!=b)
# print(a<=b)
# print(a>=b)


#5-6-25
# name="bhavan"
# age=19
# temp=69.9
# is_married=False

# #Creating lists
# fruits =[]
# fruits=list()
# fruits=["apple","banana","orange"]
# num=[1,3,4,]
# #print(num) #1,3,4 skips the extra ,
# mixed=[1,"hello",3.13,True]
# #print(fruits[0])
# #print(fruits[-1])


#fruits=["apple","banana","orange"]
#1.ADD/UPDATE
#fruits[0]="khela"
# fruits.append("kiwi") #adds at the end of the string allows duplicate values also
#fruits.insert(1,"pineapple") #can insert at given index 
#fruits2=["mango","grapes"]
#fruits.extend(fruits2)
#print(fruits)

#2.DELETE
#fruits=["apple","banana","orange"]
# a=fruits.pop()
# # print(fruits,a)
#2 a=fruits.pop(2)
#print(a)
#fruits.remove("orange")  #if index not there it throwws an value error
#4 del fruits[2]
#4 del fruits
#5 fruits.clear()
#print(fruits)


#3.SEARCH & COUNT
# i=fruits.index("banana")
# print(i)
#i=fruits.count("apple")
#print(i) #it prints the number of occerences of that fruit


#4.SORT & ORDER
# fruits.sort() #assendging order inbuilt 
#fruits.sort(reverse=True) #desc order
# fruits.reverse()
# print(fruits)

#5.HELPER METHODS
# prirnt(fruits[fruits.index("apple")]) #apple
# i=len(fruits) #len will be printed not indexes

# num=[1,2,3,"4"]
# # a=sum(num) #throws error if any string orelse return sum
# # b=max(num)
# # b=min(num)
# print(4 in num)


# words=["wakeup","exercise","work"]
# print(words[1:])
# print(words[-3:-1]) #end string will not print that end valued string will not print(-3,-2)are only included
# print(words[0][3])  #e is printed


# del words[2]
# words.reverse()
# print(words)

# a=[1,2,1,1]
# print(a.index(1))


#tuples
# colors=("red","green","pink")
# print(colors[0:4]) #print all three 4 can be excused

#1.CREATE
# a=()
# print(type(a))    #<class 'tuple'>
#b=tuple()
# colors=("red","green","pink")
# colors="red","green","pink"    #brackets are optional can be or cant be given
#a=("b",)   #single item tuple should have , at the end


#2. Access element
# s=("red","green","pink")
# print(s[2])  #using indexing pink
# print(s[-2]) #green
# print(s[1:3])  #green,pink
# print(s[:2])  #all the colors

#3.UPDATING ELEMENT IN TUPLE
#3.1 type converstion to list
# colors=("red","green","pink")
# d=list(colors)
# d.insert(2,"blue")
# d.append("yellow")
# a=tuple(d)
# print(a)      #('red', 'green', 'blue', 'pink', 'yellow')

#3.2 adding tuple
# a=("a","b","c")
# a=("a","b","c")
#b=("z,")     #('a', 'b', 'c', 'z')
# c=a+b
# print(c)   #('a', 'b', 'c', 'x', 'y', 'z')

#4. rmeove ele in tuple
#4.1
# a=("a","b","c")
# b=list(a)
# b.remove("c")
# c=tuple(b)
# print(c)

#4.2
# a=("a","b","c")
# del a
# print(a)  #error vipes the entire tuple


#5.unique from list - Tuple unpacking
# fruits=("appple","banana","kiwi","pineapple")
# a,b,*c=fruits
# print(c)  #("kiwi","pineapple")
#a,*b,*c=fruits #error occurs

#6.Helper Method
# fruits=("appple","banana","kiwi","pineapple")
# print(len(fruits))
# print(fruits.count("apple"))
# print(fruits.index("banana"))



#SETS
#1.CREATE SET
# players={}
# players=set()
# p={"bhavan","adarsh","mabbu","bhavan"}
# print(p)    #{'adarsh', 'bhavan', 'mabbu'} no duplicate values all unique values only
#no duplicates
#no indexes (orders will be changed *positions in output)
#print(players)  #dict will be printed

#2.ACCESS ELEMNTS
# p={"bhavan","adarsh","mabbu"}
# print(p.pop())   #prints randomly any of the name in the set

#3.ADD ELEMENTS
#3.1
# p={"bhavan","adarsh","mabbu","bhavan"}
# p.add("maneesh")
# print(p) #adds randomly at any of the position in the set

#3.2
# a={"laddu","mabbu"}
# b={"maneesh"}
# e={"laddu","mabbu"}
# c=["maneesh"]
# a.update(b)#b can be anything not only set it could be tuple or list
# d=e.update(c)
# print(a)
# print(d)

#3.3
# a={"aaku","puvvu","something","e"}
# b={"a","b","c"}
# c={"d","f"}
# # d=a|b|c #union
# # print(d)
# e=a&b&c #intersection prints the common item from three
# print(e)


#4. Removing element from set
# a={"laddu","mabbu"}
# a.remove("laddu")
# a.discrad("adarsh") #returns the set if not found
# a.pop()
#a.clear()  #set()
#del a


#10-06-25
#dictionaries
#CREATION
# a={}
# person={
#     "name":"bhavan",
#     "age":19
# }
# a=person["address"]
# a=person.get("address","hyd")

#MOdification
# person["age"]=25
# person.update({"age":35})
# print(person)

#DELETION
#age=person.pop("age")   #19
#a=person.popitem()     #('age', 19)
#del person["name"]     #{'age': 19}
#person.clear()       #{}

#helper methods
#a=person.keys()
#a=person.values()
#a=person.items()

# person2=person
# person["age"]=35
# print(person2)       #{'name': 'bhavan', 'age': 35}

#merging dict
# user={"name":"bhavan"}
# user2={"age":19}
# merge={**user,**user2}
# print(merge)

# 1. lists inside lists
 
# fruits = [["jack", "apple"], ["orange", "kiwi"], ["dragon", "grape"]]
 
# print(fruits[-1][-2])
 
 
# 2. tuple inside tuple
# coordinates = ((0, 1), (2, 3), (4, 5))
# print(coordinates[2][1])
 
 
# 3. tuple inside a list
# students = [("Alice", 23), ("Bob", 21)]
# print(students[1][1])
 
# 4. List inside a tuple
# groups = ([10, 20], [30, 40])
# print(groups[1][1])
 
# 5. list of dictionaries
# students = [{
#     "name": "Alice",
#     "age": 23
# }, {
#     "name": "Bob",
#     "age": 27
# }]
 
# print(students[0]["name"])
 
 
# 6. List inside a dictionary
# subject_marks = {
#     "Math": [30, 67, 80]
# }
# print(subject_marks["Math"][1])
 
 
# 7. Dictionary inside a Dictionary
# user_profile = {
#     "alice": {
#         "name": "Alice",
#         "age": 23
#     }
# }
 
# print(user_profile)
 
 
# 8. Dictionary inside a list
 
# billing_history = [{
#     "amount": "200",
#     "status": "failed"
# },
# {
#     "amount": "832",
#     "status": "success"
# }
# ]
 
# for i in billing_history:
#     print(f'Payment Rs.{i["amount"]} was {i["status"]}')
 
# 9. dictionary inside a tuple
# billing_history = ({
#     "amount": "200",
#     "status": "failed"
# },
# {
#     "amount": "832",
#     "status": "success"
# }
# )
 
# for i in billing_history:
#     print(f'Payment Rs.{i["amount"]} was {i["status"]}')
 
 
# students = [
#    {"name": "Alice", "marks": [80, 85, 90]},
#    {"name": "Bob", "marks": [70, 75, 68]},
#    {"name": "Charlie", "marks": [90, 92, 88]}
# ]
# # Task:
# # Write a function that calculates average marks for each student,
# # then sorts and prints
# students = [
#     {"name": "Alice", "marks": [80, 85, 90]},
#     {"name": "Bob", "marks": [70, 75, 68]},
#     {"name": "Charlie", "marks": [90, 92, 88]}
# ]

# for i in students:
#     avg=sum(i["marks"])/len(i["marks"])
#     print(f"{i["name"]} avg of the student is:{avg}")

# Alice avg of the student is:85.0
# Bob avg of the student is:71.0
# Charlie avg of the student is:90.0

#13-6-25
#1. IF
# if True:
#     print(a)


#2. IF ELSE
# if True:
#     print("good")
# else:
#     print("bad")


#3.IF_ELIF_ELSE
# a,b=1,3
# if a>b:
#     print("One")
# elif a==b:
#     print("two")
# else:
#     print("done")


#4.IF-ELIF
# a,b=1,3
# if a<b:
#     print("one")
# elif b>a:
#     print("two")


#1. Check if it is valid combo
#2.For every if,else,elif block,identation must be at same level
#3.At any point,only block will be executed in a given combo


