
#13-6-25
#1. IF
# if True:
#     print(a)


#2. IF ELSE
# if True:
#     print("good")
# else:
#     print("bad")


#3.IF_ELIF_ELSE
# a,b=1,3
# if a>b:
#     print("One")
# elif a==b:
#     print("two")
# else:
#     print("done")


#4.IF-ELIF
# a,b=1,3
# if a<b:
#     print("one")
# elif b>a:
#     print("two")


#1. Check if it is valid combo
#2.For every if,else,elif block,identation must be at same level
#3.At any point,only block will be executed in a given combo

#16/06/25
#FUNCTIONS


#17/06/25

#19/06/25

#23/06/25
#assigned grps

#24/06/25
#OOPS

#26/06/25
#encapsulation
#class Dog:
#     def __init__(self,name,breed):
#         self.__name=name
#         self.breed=breed
#     def accesss(self):
#         print(self.__name)
#     def change_name(self,new):
#         self.__name=new
#         return self.__name
# dog=Dog("chintu","lab")
# dog.accesss()
# print(dog.change_name("bunty"))
# dog.accesss()

#27/06/25

#7/7/25

#09/07/25
# a=[32,45,99,100,122,32]
# def even(a,i):
#     if i>= len(a):
#         return
#     else:
#         if a[i]%2==0:
#             print(a[i])
#     even(a,i+1)
# even(a,0)

# x,y=0,0
# up=int(input("up:"))
# down=int(input("down:"))
# left=int(input("left:"))
# right=int(input("right:"))
# if up:
#     y+=up
# if down:
#     y-=down
# if right:
#     x+=right
# if left:
#     x-=left
# print(((x**2)+(y**2))**0.5)
# print(f"expected output:{((x**2)+(y**2))**0.5}")

# a=("tom",19,80)
# b=("john",20,90)
# c=("anton",17,91)
# d=("json",21,85)
# a=input("enter the tuple:")
# b=input("enter the tuple:")
# c=input("enter the tuple:")
# d=input("enter the tuple:")
# e=list(a,b,c,d)
# sorted_values=sorted(e)
# print(sorted_values)

# people=[]
# while True:
#     person=input()
#     if not person:
#         break
#     parts=person.split(",")
#     name=parts[0]
#     age=int(parts[1])
#     height=int(parts[2])
#     people.append(name,age,height)
   
# print(sorted(people))

#fast api

# from fastapi import Body, FastAPI, Query
# import json
 
# app = FastAPI()
 
# def load_json_db():
#     #open file and return data
#     with open("database.json", 'r') as f:
#         return json.load(f)
   
 
# def save_json_db(user_details):
#     with open('database.json', 'w') as f:
#         json.dump(user_details, f)
 
# @app.post('/save')
# def users(details: dict = Body(...)):
#     all_users = load_json_db()
#     all_users.update({ details.get('username') : details.get('password')})
#     save_json_db(all_users)
#     # print(all_users)
#     all_users = load_json_db()
#     return all_users

# @app.post('/user/add')
# def add_user(details: dict = Body(...)):
#     username = details.get("username")
#     password = details.get("password")

#     if not username or not password:
#         raise HTTPException(status_code=400, detail="Username and password required.")

#     users = load_json_db()
#     if username in users:
#         raise HTTPException(status_code=400, detail="Username already exists.")

#     users[username] = password
#     save_json_db(users)
#     return {"message": f"User '{username}' added successfully."}

# @app.put("/password/update")
# def update_password(username: str = Query(...), new_password: str = Body(...)):
#     users = load_json_db()

#     if username not in users:
#         raise HTTPException(status_code=404, detail="User not found.")

#     users[username] = new_password
#     save_json_db(users) 
#     return {"message": f"Password updated for user '{username}'."}

# @app.delete("/user/delete")
# def delete_user(username: str = Query(...)):
#     users = load_json_db()

#     if username not in users:
#         raise HTTPException(status_code=404, detail="User not found.")

#     del users[username]
#     save_json_db(users)
#     return {"message": f"User '{username}' deleted successfully."}

# @app.get("/user/all")
# def get_all_users():
#     return load_json_db()

# @app.get("/user")
# def get_user(username: str = Query(...)):
#     users = load_json_db()

#     if username not in users:
#         raise HTTPException(status_code=404, detail="User not found.")

#     return {username: users[username]}
