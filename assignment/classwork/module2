
#13-6-25
#1. IF
# if True:
#     print(a)


#2. IF ELSE
# if True:
#     print("good")
# else:
#     print("bad")


#3.IF_ELIF_ELSE
# a,b=1,3
# if a>b:
#     print("One")
# elif a==b:
#     print("two")
# else:
#     print("done")


#4.IF-ELIF
# a,b=1,3
# if a<b:
#     print("one")
# elif b>a:
#     print("two")


#1. Check if it is valid combo
#2.For every if,else,elif block,identation must be at same level
#3.At any point,only block will be executed in a given combo

#16/06/25
#FUNCTIONS


#17/06/25

#19/06/25

#23/06/25
#assigned grps

#24/06/25
#OOPS

#26/06/25
#encapsulation
#class Dog:
#     def __init__(self,name,breed):
#         self.__name=name
#         self.breed=breed
#     def accesss(self):
#         print(self.__name)
#     def change_name(self,new):
#         self.__name=new
#         return self.__name
# dog=Dog("chintu","lab")
# dog.accesss()
# print(dog.change_name("bunty"))
# dog.accesss()

#27/06/25

#7/7/25

#09/07/25
# a=[32,45,99,100,122,32]
# def even(a,i):
#     if i>= len(a):
#         return
#     else:
#         if a[i]%2==0:
#             print(a[i])
#     even(a,i+1)
# even(a,0)

# x,y=0,0
# up=int(input("up:"))
# down=int(input("down:"))
# left=int(input("left:"))
# right=int(input("right:"))
# if up:
#     y+=up
# if down:
#     y-=down
# if right:
#     x+=right
# if left:
#     x-=left
# print(((x**2)+(y**2))**0.5)
# print(f"expected output:{((x**2)+(y**2))**0.5}")

# a=("tom",19,80)
# b=("john",20,90)
# c=("anton",17,91)
# d=("json",21,85)
# a=input("enter the tuple:")
# b=input("enter the tuple:")
# c=input("enter the tuple:")
# d=input("enter the tuple:")
# e=list(a,b,c,d)
# sorted_values=sorted(e)
# print(sorted_values)

# people=[]
# while True:
#     person=input()
#     if not person:
#         break
#     parts=person.split(",")
#     name=parts[0]
#     age=int(parts[1])
#     height=int(parts[2])
#     people.append(name,age,height)
   
# print(sorted(people))

#fast api

# from fastapi import Body, FastAPI, Query
# import json
 
# app = FastAPI()
 
# def load_json_db():
#     #open file and return data
#     with open("database.json", 'r') as f:
#         return json.load(f)
   
 
# def save_json_db(user_details):
#     with open('database.json', 'w') as f:
#         json.dump(user_details, f)
 
# @app.post('/save')
# def users(details: dict = Body(...)):
#     all_users = load_json_db()
#     all_users.update({ details.get('username') : details.get('password')})
#     save_json_db(all_users)
#     # print(all_users)
#     all_users = load_json_db()
#     return all_users

# @app.post('/user/add')
# def add_user(details: dict = Body(...)):
#     username = details.get("username")
#     password = details.get("password")

#     if not username or not password:
#         raise HTTPException(status_code=400, detail="Username and password required.")

#     users = load_json_db()
#     if username in users:
#         raise HTTPException(status_code=400, detail="Username already exists.")

#     users[username] = password
#     save_json_db(users)
#     return {"message": f"User '{username}' added successfully."}

# @app.put("/password/update")
# def update_password(username: str = Query(...), new_password: str = Body(...)):
#     users = load_json_db()

#     if username not in users:
#         raise HTTPException(status_code=404, detail="User not found.")

#     users[username] = new_password
#     save_json_db(users) 
#     return {"message": f"Password updated for user '{username}'."}

# @app.delete("/user/delete")
# def delete_user(username: str = Query(...)):
#     users = load_json_db()

#     if username not in users:
#         raise HTTPException(status_code=404, detail="User not found.")

#     del users[username]
#     save_json_db(users)
#     return {"message": f"User '{username}' deleted successfully."}

# @app.get("/user/all")
# def get_all_users():
#     return load_json_db()

# @app.get("/user")
# def get_user(username: str = Query(...)):
#     users = load_json_db()

#     if username not in users:
#         raise HTTPException(status_code=404, detail="User not found.")

#     return {username: users[username]}


# from fastapi import FastAPI, HTTPException
# from fastapi.responses import JSONResponse
# import sqlite3

# app=FastAPI()

# def get_db():
#     conn=sqlite3.connect("database")
#     return conn

# @app.post("/users")
# def create_user(name,username,password,course_id):
#     course_id=int(course_id)
#     try:
#         conn=get_db()
#         cursor=conn.cursor()
#         cursor.execute("INSERT INTO users(name,username,password,course_id) VALUES(?,?,?,?)",(name,username,password,course_id))
#         user_id=cursor.lastrowid
#         conn.commit()
#         conn.close()
#         return JSONResponse(content={
#             "message":"successfully created user",
#             "user_id":user_id
#         })
#     except Exception as e:
#         print("Something went wrong while execution")

# @app.get("/users")
# def all_users():
#     conn=get_db()
#     cursor=conn.cursor()
#     cursor.execute("SELECT * FROM users")
#     users=cursor.fetchall()
#     cursor.close()
#     result=[]
#     for user in users:
#         result.append(list(user))
#     return result

# @app.put("/users/{user_id}")
# def update_user_password(user_id,password):
#     conn=get_db()
#     cursor=conn.cursor()
#     cursor.execute("SELECT * FROM users WHERE id=?",(user_id,))
#     if not cursor.fetchone():
#         conn.close()
#         return JSONResponse(content={
#             "message":f"user with id-{user_id} was not found"
#         })    
#     if password:
#         cursor.execute("UPDATE users SET password=? WHERE id=?",(password,user_id))
#         conn.commit()
#         conn.close()
#         return JSONResponse(content={
#             "message":f"UPDATED successfully for user-{user_id}"
#         })
    
# @app.delete("/users/{user_id}")
# def delete_user(user_id):
#         conn=get_db()
#         cursor=conn.cursor()
#         cursor.execute("DELETE FROM users WHERE id=?",(user_id,))
#         if cursor.rowcount==0:
#             raise HTTPException(status_code=404,detail="User not found to delete")
#         conn.commit()
#         conn.close()
#         return JSONResponse(content={
#             "message":f"Successfully deleted the user-{user_id}"
#         })


# #----courses----
# @app.post("/courses")
# def create_course(name,duration):
#     try:
#         conn=get_db()
#         cursor=conn.cursor()
#         cursor.execute("INSERT INTO courses(name,duration) VALUES(?,?)",(name,duration))
#         course_id=cursor.lastrowid
#         conn.commit()
#         conn.close()
#         return JSONResponse(content={
#             "message":"successfully created user",
#             "user_id":course_id
#         })
#     except Exception as e:
#         print("Something went wrong while execution")


# @app.get("/courses")
# def all_courses():
#     conn=get_db()
#     cursor=conn.cursor()
#     cursor.execute("SELECT * FROM courses")
#     courses=cursor.fetchall()
#     cursor.close()
#     result=[]
#     for course in courses:
#         result.append(list(course))
#     return result

# @app.put("/courses/{course_id}")
# def update_user_password(course_id,duration):
#     conn=get_db()
#     cursor=conn.cursor()
#     cursor.execute("SELECT * FROM users WHERE id=?",(course_id,))
#     if not cursor.fetchone():
#         conn.close()
#         return JSONResponse(content={
#             "message":f"couse with id-{course_id} was not found"
#         })    
#     if duration:
#         cursor.execute("UPDATE courses SET duration=? WHERE id=?",(duration,course_id))
#         conn.commit()
#         conn.close()
#         return JSONResponse(content={
#             "message":f"UPDATED successfully for course-{course_id}"
#         })

# @app.delete("/courses/{course_id}")
# def delete_user(course_id):
#         conn=get_db()
#         cursor=conn.cursor()
#         cursor.execute("DELETE FROM courses WHERE id=?",(course_id,))
#         if cursor.rowcount==0:
#             raise HTTPException(status_code=404,detail="course not found to delete")
#         conn.commit()
#         conn.close()
#         return JSONResponse(content={
#             "message":f"Successfully deleted the course-{course_id}"
#         })


# <!DOCTYPE html>
# <html lang="en">
 
# <head>
#     <title>Medha</title>
#     <link rel="icon" type="image/x-icon" href="https://en.wikipedia.org/static/images/icons/wikipedia.png">
# </head>
 
# <body>
#     <!-- Text Content Tags-->
 
#     <!-- Headings-->
#     <h1> Heading 1</h1>
#     <h2> Heading 2</h2>
#     <h3> Heading 3</h3>
#     <h4> Heading 4</h4>
#     <h5> Heading 5</h5>
#     <h6> Heading 6</h6>
 
#     <p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. <br><br>
#         <hr>
 
#         <b>Lorem Ipsum </b>
 
#         <strong>has been the </strong>
#         <i>industry's standard dummy text </i>
 
#         <u>ever since the 1500s, </u>
 
#         when an unknown printer took a galley of type and scrambled it to make a type <mark>specimen book.</mark>
 
#         It has survived not only <del>five centuries</del> four cenrturies, but also the leap into electronic
#         typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset
#         sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker
#         including versions of Lorem Ipsum.
#     </p>
 
#     <!-- List Tags-->
 
#     <ul>
#         <li>First Item</li>
#         <li>Second Item</li>
#     </ul>
 
#     <ol>
#         <li>Second Item</li>
#         <li>First Item</li>
#     </ol>
 
#     <!-- Media Tags-->
 
#     <a href="http://medhaedutech.com/" target="_blank">Click me</a>
 
#     <a href="mailto:saurav@gmail.com" target="_blank">Click me</a>
 
#     <a href="tel:917013908761">Call me</a>
 
#     <div>
#         <img src="https://medhaedutech.com/wp-content/uploads/2023/09/aaa.png" width="200" height="200">
#     </div>
# </body>
 
# <audio controls>
#     <source src="https://www.coothead.co.uk/audio/You-Cant-Always-Get-What-You-Want.mp3" type="audio/mpeg">
# </audio>
 
# <!-- <video autoplay="false" loop="" controls="" width="640" height="480">
# <source type="video/mp4" src="https://endtest-videos.s3-us-west-2.amazonaws.com/documentation/endtest_data_driven_testing_csv.mp4">
# </video>
 
# <iframe width="560" height="315" src="https://www.youtube.com/embed/eWRfhZUzrAc?si=yzdtNo2HgKfap2sO" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe> -->
 
# <!-- Table Tags-->
 
# <table>
#      <thead>
#         <tr>
#              <th>Name</th>
#              <th>Age</th>
#         </tr>
#      </thead>
 
#      <tbody>
#         <tr>
#              <td>John</td>
#              <td>40</td>
#         </tr>
#         <tr>
#              <td>Alex</td>
#              <td>40</td>
#         </tr>
 
#      </tbody>
# </table>
 
# <!-- FORm Tags-->
 
 
# <form action="/submit-form" method="POST">
  
#     <!-- Basic text inputs -->
 
#     <input type="text" name="username" required> <br>
 
#     <input type="email" name="email" placeholder="email" value="john@gmail.com" disabled> <br>
    
#     <input type="password" name="password" placeholder="password">. <br>
 
#     <input type="tel" name="phone" placeholder="phone"> <br>
    
 
#     <!-- Number & date Inputs -->
 
#     <input type="number" min="18" max="100" step="5">
 
#     <input type="date" min="2023-01-01" max="2025-12-31">
 
#     <input type="time">
 
#     <input type="month"> <br>
 
#     <input type="week"> <br>
 
#     <input type="range" min="20">
    
 
#     <!-- Selection Inputs-->
 
#     <input type="checkbox" id="music">
#     <label for="music">Music</label>
 
 
#     <input type="radio" id="male">
#     <label for="male">Male</label>
 
#     <input type="radio" id="female">
#     <label for="female">Female</label>
 
#     <!-- File and color inputs-->
#      <input type="file" accept=".pdf,.doc,.docx" multiple>
 
#      <input type="color">
 
#      <input type="hidden" value="ajkshk-asjkhd-ajksdb">
 
#      <select name="country" multiple>
#         <option>Choose a country</option>
#         <option value="us">US</option>
#         <option value="ca">Canada</option>
#      </select>
    
 
#     <!-- Text Area-->
 
#     <textarea rows="5" cols="40" placeholder="akshjd" maxlength="4"></textarea>
 
# <button type="submit">Submit</button>
#     <button type="reset">Reset</button>
# </form>
 
# <br>
# <br>
# <br>
 
# <form action="https://met-demo.requestcatcher.com/" method="post">
#     <input type="text" name="username">
#     <button type="submit">Submit</button>
# </form>
 
# </html>
 